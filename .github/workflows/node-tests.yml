name: Node Tests

on:
  workflow_call:
    inputs:
      node:
        default: 16
        required: false
        type: number
      npm:
        default: 8
        required: false
        type: number
      ci:
        default: false
        required: false
        type: boolean
      cache:
        default: true
        required: false
        type: boolean
      check-git-conflict:
        default: true
        required: false
        type: boolean
      check-gitignore:
        default: true
        required: false
        type: boolean
      create-env:
        default: false
        required: false
        type: boolean
      env-mode:
        default: "test"
        required: false
        type: string
      env-path:
        default: "./"
        required: false
        type: string
      install-npm:
        default: false
        required: false
        type: boolean
      run-audit:
        default: false
        required: false
        type: boolean
      run-test:
        default: true
        required: false
        type: boolean
      run-lint:
        default: true
        required: false
        type: boolean
      run-build:
        default: true
        required: false
        type: boolean
      working-directory:
        default: "."
        required: false
        type: "string"
      checkout:
        default: true
        required: false
        type: boolean

jobs:
  node-tests:
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    name: Install, build, and test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Cancel previous runs of this workflow (pull requests only)
        if: github.event_name == 'pull_request'
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout code
        if: inputs.checkout == true
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Check for gitignored files
        if: inputs.check-gitignore
        shell: bash
        run: |
          if [[ ! -z $(git ls-files -i --exclude-standard) ]]; then
            echo "Gitignored files found."
            exit 1
          fi

      - name: Check for git conflicts
        if: inputs.check-git-conflict
        shell: bash
        run: |
          if [[ ! -z $(git grep -E "<<<<<<< |>>>>>>> " -- './*' ':!buddy.yml' ':!.buddy/*') ]]; then
            echo "Git conflict found."
            exit 1
          fi

      - name: Create .env file
        if: inputs.create-env
        uses: xom9ikk/dotenv@v2
        with:
          mode: ${{ inputs.env-mode }}
          path: ${{ inputs.env-path }}

      - name: Check if the plugin has front-end assets
        shell: bash
        id: has-node-assets
        run: |
          [[ -f package.json ]] && echo "exists=true" >> $GITHUB_OUTPUT || echo "exists=false" >> $GITHUB_OUTPUT

      - name: Check if the plugin has a package-lock file
        shell: bash
        id: has-package-lock
        if: steps.has-node-assets.outputs.exists == 'true'
        run: |
          [[ -f package-lock.json ]] && echo "exists=true" >> $GITHUB_OUTPUT || echo "exists=false" >> $GITHUB_OUTPUT

      - name: Setup Node
        if: steps.has-node-assets.outputs.exists == 'true'
        uses: actions/setup-node@v4
        with:
          cache: ${{ inputs.cache && steps.has-package-lock.outputs.exist == 'true' && inputs.cache || '' }}
          node-version: ${{ inputs.node }}

      - name: Install npm
        if: steps.has-node-assets.outputs.exists == 'true' && inputs.install-npm
        run: npm install -g npm@${{ inputs.npm }}

      - name: Audit node
        if: steps.has-node-assets.outputs.exists == 'true' && inputs.run-audit
        run: npm audit --audit-level=high --production

      - name: Install node dependencies (npm install)
        if: steps.has-node-assets.outputs.exists == 'true' && ! inputs.ci
        run: npm install

      - name: Install node dependencies (npm ci)
        if: steps.has-node-assets.outputs.exists == 'true' && inputs.ci
        run: npm ci

      - name: Run npm test
        if: steps.has-node-assets.outputs.exists == 'true' && inputs.run-test
        run: npm run test

      - name: Run npm lint
        if: steps.has-node-assets.outputs.exists == 'true' && inputs.run-lint
        run: npm run lint

      - name: Run npm build
        if: steps.has-node-assets.outputs.exists == 'true' && inputs.run-build
        run: npm run build
