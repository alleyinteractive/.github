name: PHPUnit Testing Suite

on:
  workflow_call:
    inputs:
      action:
        default: "install"
        required: false
        type: "string"
      command:
        default: "phpunit"
        required: false
        type: "string"
      os:
        default: "ubuntu-latest"
        required: false
        type: string
      php:
        default: "8.1"
        required: false
        type: string
      wordpress:
        default: "latest"
        required: false
        type: "string"
      multisite:
        default: false
        required: false
        type: boolean
      database:
        default: "mysql:8.0"
        required: false
        type: "string"
      object-cache:
        default: ""
        required: false
        type: string
      dependency-versions:
        default: "locked"
        required: false
        type: "string"
      test-suite:
        default: ""
        required: false
        type: "string"
      package-directory:
        default: "plugins"
        required: false
        type: "string"

jobs:
  test:
    runs-on: ${{ inputs.os }}
    timeout-minutes: 10
    services:
      mysql:
        image: ${{ inputs.database }}
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      # Include the below services conditionaly.
      # The service will not start if the image is empty.
      # See https://github.com/actions/runner/issues/822
      redis:
        image: ${{ ( inputs.object-cache == 'redis' ) && format('{0}:alpine', inputs.object-cache) || '' }}
        ports:
          - "6379:6379"
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
      memcached:
        image: ${{ ( inputs.object-cache == 'memcached' ) && format('{0}:alpine', inputs.object-cache) || '' }}
        ports:
          - "11211:11211"
    name: "phpunit ${{ inputs.php }} - ${{ inputs.wordpress }} - ${{ inputs.os }} - multisite: ${{ inputs.multisite }}"
    env:
      CACHEDIR: /tmp/test-cache
      WP_CORE_DIR: /tmp/wordpress
      WP_VERSION: ${{ inputs.wordpress }}
      WP_DB_HOST: 127.0.0.1
      WP_DB_USER: root
      WP_DB_PASSWORD: '""'
      WP_MULTISITE: ${{ inputs.multisite == true && 1 || 0 }}
      PACKAGE_DIRECTORY: ${{ inputs.test-suite == 'core-test-suite' && format('{0}/wp-content/{1}/', /tmp/wordpress, inputs.package-directory) || '.' }}

    steps:
      - name: Cancel previous runs of this workflow (pull requests only)
        if: github.event_name == 'pull_request'
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Setup Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHEDIR }}
          key: ${{ runner.os }}-php-tests-${{ inputs.php }}-${{ inputs.wordpress }}
          restore-keys: |
            ${{ runner.os }}-php-tests-${{ inputs.php }}-${{ inputs.wordpress }}
            ${{ runner.os }}-php-tests-${{ inputs.php }}-

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ inputs.php }}
          extensions: apc, dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, gd
          tools: composer:v2
          coverage: none

      - name: Setup WordPress with core test suite
        if: inputs.test-suite == 'core-test-suite'
        shell: bash
        env:
          WP_INSTALL_CORE_TEST_SUITE: true
        run: |
          bash <(curl -s "https://raw.githubusercontent.com/alleyinteractive/mantle-ci/HEAD/install-wp-tests.sh") wordpress_unit_tests ${{ env.WP_DB_USER }} ${{ env.WP_DB_PASSWORD }} ${{ env.WP_DB_HOST }} ${{ env.WP_VERSION }} false false ${{ inputs.object-cache != '' && true || false }}
          rsync -aWq --no-compress --exclude '.npm' --exclude '.git' --exclude ${WP_CORE_DIR} --exclude 'node_modules' . ${ env.PACKAGE_DIRECTORY }

      - name: Validate Composer
        run: composer validate

      - name: Install dependencies
        uses: ramsey/composer-install@v3
        if: inputs.action == 'install'
        with:
          working-directory: ${{ inputs.test-suite == 'core-test-suite' && env.PACKAGE_DIRECTORY || '.'}}
          composer-options: "--no-progress --no-ansi --no-interaction --prefer-dist"
          dependency-versions: ${{ inputs.dependency-versions }}

      - name: Update dependencies
        uses: nick-invision/retry@v3.0.0
        if: inputs.action == 'update'
        with:
          timeout_minutes: 5
          max_attempts: 5
          command: composer update --prefer-dist --no-interaction

      - name: Test Package
        shell: bash
        run: |
          # Cd into the test directory if test-suite is set to core-test-suite
          if [ "${{ inputs.test-suite }}" == "core-test-suite" ]; then
            cd ${{ env.PACKAGE_DIRECTORY }}
          fi

          composer run ${{ inputs.command }}
